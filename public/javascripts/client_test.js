// Generated by CoffeeScript 1.6.3
(function() {
  this.client_test = function(apps, callback) {
    return $.each(apps, function(index, app) {
      var alive, client, url;
      url = $.url(app.url);
      switch (url.attr('protocol')) {
        case 'http':
        case 'https':
          return $.get(app.url, function(data, textStatus, jqXHR) {
            return callback(app, true, textStatus);
          }).fail(function(jqXHR, textStatus, errorThrown) {
            if (errorThrown === 'No Transport') {
              return callback(app, null, errorThrown);
            } else {
              return callback(app, false, errorThrown);
            }
          });
        case 'ws':
        case 'wss':
          if (window.WebSocket) {
            client = new WebSocket(app.url);
            alive = null;
            client.onopen = function(evt) {
              if (!app.data) {
                alive = true;
                callback(app, alive, evt.type);
                if (!app.connection) {
                  return client.close();
                }
              }
            };
            client.onmessage = function(evt) {
              if (alive == null) {
                alive = true;
                return callback(app, alive, evt.type);
              }
            };
            client.onclose = function(evt) {
              if (app.connection || (alive == null)) {
                alive = false;
                return callback(app, alive, evt.type);
              }
            };
            client.onerror = function(evt) {
              if (app.connection || (alive == null)) {
                alive = false;
                return callback(app, alive, evt.type);
              }
            };
            return setTimeout(function() {
              if (alive == null) {
                alive = false;
                callback(app, alive, 'timeout');
                return client.close();
              }
            }, 10000);
          } else {
            return callback(app, null, "client not support websocket");
          }
          break;
        default:
          return callback(app, null, "unsupported protocol");
      }
    });
  };

}).call(this);

/*
//@ sourceMappingURL=client_test.map
*/
